pipeline {
    agent any
    parameters {
            gitParameter name: 'BRANCH_TAG',
                         type: 'PT_BRANCH_TAG',
                        defaultValue: 'origin/master'
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    def gitParams = checkout([$class: 'GitSCM', extensions: [[$class: 'CleanCheckout']],userRemoteConfigs: [[credentialsId: <credentialsId>, url: <git url>]]])
                    env.branch_name = gitParams['GIT_BRANCH']
                    echo "${branch_name}"
                }
            }
        }
        stage('Select Branch') {
            steps {
               
                script {
                    if (env.branch_name != 'master') {

                        echo "${params.BRANCH_TAG}"
                        checkout([$class: 'GitSCM',
                                branches: [[name: "${params.BRANCH_TAG}"]],
                                doGenerateSubmoduleConfigurations: false,
                                extensions: [],
                                gitTool: 'Default',
                                submoduleCfg: [],
                                userRemoteConfigs: [[url: '<git url>', credentialsId: '<credentialsId>']]
                        ])
                    }
                }
            }
        }
        =======================================================================================================================================================
        
        pipeline {
    agent any
    environment {
        GITHUB_PROJECT = "https://gitlab.com/hdglpvendor/hdglp-gethigh.git"
        GITHUB_CREDENTIALS_ID = "Gethigh_js" //maps to a Jenkins Credentials Vault ID
        APPLICATION_NAME = "Gethigh"
        GITHUB_BRANCH = "${env.BRANCH_NAME}"
    }
    stages {
        stage('Hello') {
            steps {
                script {
                    echo "Initializing workflow"
                    //checkout code
                    echo "${GITHUB_PROJECT}"
                    git url: GITHUB_PROJECT, credentialsId: GITHUB_CREDENTIALS_ID
                    echo 'git url done'
                    // sh 'git branch -r'
                    sh 'git branch -r | awk \'{print $1}\' ORS=\'\n\' >branches.txt'
                    sh 'cut -d "\" -f 2 branches.txt >branch.txt'
                    echo 'Hello World'
                }
            }
        }
        stage('get build branch Parameter User Input') {
            steps {
                script {
                    liste = readFile 'branch.txt'
                    echo "please click on the link here to chose the branch to build"
                    env.BRANCH_SCOPE = input message: 'Please choose the branch to build ', ok: 'Validate!',
                        parameters: [choice(name: 'BRANCH_NAME', choices: "${liste}", description: 'Branch to build?')]
                }
            }
        }
       
        stage('Checkout external proj') {
            when {branch 'master'}
            steps {
                script {
                    echo "${env.BRANCH_SCOPE}"
                    git branch: "${env.BRANCH_SCOPE}",
                    credentialsId: 'Gethigh_js',
                    url: 'https://gitlab.com/hdglpvendor/hdglp-gethigh.git'

                    sh "ls -lat"
                }
            }
        }
    }
}
=====================================================================================================================================================================
pipeline {
    agent any
    parameters {
            gitParameter name: 'BRANCH_TAG',
                         type: 'PT_BRANCH_TAG',
                        defaultValue: 'origin/master'
    }
    environment {
    //Use Pipeline Utility Steps plugin to read information from pom.xml into env variables
        IMAGE = readMavenPom().getArtifactId()
        VERSION = readMavenPom().getVersion()
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    def gitParams = checkout([$class: 'GitSCM', extensions: [[$class: 'CleanCheckout']],userRemoteConfigs: [[credentialsId: <Credential Id>, url: <GIT URL>]]])
                    env.branch_name = gitParams['GIT_BRANCH']
                    echo "${branch_name}"
                }
            }
        }
        stage('Select Branch') {
            steps {
               
                script {
                    if (env.branch_name != 'master') {

                        echo "${params.BRANCH_TAG}"
                        checkout([$class: 'GitSCM',
                                branches: [[name: "${params.BRANCH_TAG}"]],
                                doGenerateSubmoduleConfigurations: false,
                                extensions: [],
                                gitTool: 'Default',
                                submoduleCfg: [],
                                userRemoteConfigs: [[url: <GIT URL>, credentialsId: <Credentials ID>]]
                        ])
                    }
                }
            }
        }
       
        stage ('Unit Tests') {
           
        }
        stage('Maven Build') {
            steps {
                script {
                    NOW = new Date()
                    TODAY_DATE = NOW.format("YYYYMMDD")
                }
                sh 'mvn clean install package'
                sh 'mv webapp/target/*.war webapp/target/${IMAGE}_${VERSION}_${TODAY_DATE}'
            }
        }
    }
}
